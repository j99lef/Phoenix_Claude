Got it. Here's the complete Replit agent specification focusing on the code implementation:

# Complete AI Travel Agent Build Specification for Replit Agent

## Project Overview

Build an automated AI travel agent system for the Lefley family that monitors travel deals, analyzes them using AI, and sends alerts for good matches. Connect to existing Google Sheet database.

## Family Profile (For AI Context)

### **Complete Family**
- **Jonathan Michael Lefley** (53) - Always travels
- **Belinda Ellen Lefley** (46) - Always travels  
- **Tabitha Belinda Lefley** (17) - Rarely joins family holidays
- **Martha Rose Lefley** (13) - Always travels
- **Margot Jean Lefley** (10) - Always travels

### **Travel Configurations**
- **Standard**: 2 adults + 2 children (Martha & Margot) = 4 people
- **Occasional**: 2 adults + 3 children (including Tabitha) = 5 people

## Required Python Application Structure

### **File Structure**
```
main.py - Application entry point and scheduler
config.py - Configuration and environment variables
travel_agent.py - Main logic orchestrator
amadeus_api.py - Amadeus API integration
openai_analyzer.py - AI deal analysis
sheets_handler.py - Google Sheets integration
telegram_notifier.py - Telegram alert system
logger.py - Logging system
requirements.txt - Dependencies
```

### **Dependencies (requirements.txt)**
```
requests>=2.31.0
openai>=1.0.0
gspread>=5.10.0
oauth2client>=4.1.3
schedule>=1.2.0
python-telegram-bot>=20.0
python-dateutil>=2.8.2
pandas>=2.0.0
```

## Core Application Logic

### **main.py - Application Entry Point**
```python
import schedule
import time
import logging
from travel_agent import TravelAgent
from logger import setup_logging

def main():
    setup_logging()
    agent = TravelAgent()
    
    # Schedule checks every 6 hours between 9 AM and 9 PM
    schedule.every(6).hours.do(agent.run_deal_search)
    
    # Keep application running
    while True:
        schedule.run_pending()
        time.sleep(3600)  # Check every hour for scheduled tasks

if __name__ == "__main__":
    main()
```

### **travel_agent.py - Main Orchestrator**
```python
class TravelAgent:
    def __init__(self):
        self.sheets = SheetsHandler()
        self.amadeus = AmadeusAPI()
        self.ai_analyzer = OpenAIAnalyzer()
        self.telegram = TelegramNotifier()
        
    def run_deal_search(self):
        """Main execution flow"""
        try:
            # Get active travel briefs
            active_briefs = self.sheets.get_active_briefs()
            
            for brief in active_briefs:
                self.process_travel_brief(brief)
                
        except Exception as e:
            logging.error(f"Error in deal search: {e}")
    
    def process_travel_brief(self, brief):
        """Process individual travel brief"""
        try:
            # Search for flights
            flight_deals = self.amadeus.search_flights(brief)
            
            # Search for hotels if needed
            hotel_deals = self.amadeus.search_hotels(brief)
            
            # Combine and analyze deals
            for deal in flight_deals:
                analysis = self.ai_analyzer.analyze_deal(deal, brief)
                
                if analysis['score'] >= 8:
                    self.telegram.send_alert(deal, analysis, brief)
                
                # Log all deals
                self.sheets.log_deal(deal, analysis, brief)
            
            # Update last checked timestamp
            self.sheets.update_brief_timestamp(brief['Brief_ID'])
            
        except Exception as e:
            logging.error(f"Error processing brief {brief['Brief_ID']}: {e}")
```

### **amadeus_api.py - API Integration**
```python
import requests
from datetime import datetime, timedelta
import config

class AmadeusAPI:
    def __init__(self):
        self.base_url = "https://api.amadeus.com"
        self.access_token = None
        self.get_access_token()
    
    def get_access_token(self):
        """Get OAuth token for Amadeus API"""
        url = f"{self.base_url}/v1/security/oauth2/token"
        data = {
            'grant_type': 'client_credentials',
            'client_id': config.AMADEUS_CLIENT_ID,
            'client_secret': config.AMADEUS_CLIENT_SECRET
        }
        response = requests.post(url, data=data)
        self.access_token = response.json()['access_token']
    
    def search_flights(self, brief):
        """Search for flights based on brief criteria"""
        headers = {'Authorization': f'Bearer {self.access_token}'}
        
        # Parse brief data
        destinations = brief['Destinations'].split(',')
        departure_codes = self.parse_airport_codes(brief['Departure_Location'])
        
        deals = []
        for dest in destinations:
            for departure in departure_codes:
                params = {
                    'originLocationCode': departure,
                    'destinationLocationCode': self.get_airport_code(dest),
                    'departureDate': self.parse_travel_dates(brief['Travel_Dates'])[0],
                    'adults': self.parse_travelers(brief['Travelers'])['adults'],
                    'children': self.parse_travelers(brief['Travelers'])['children'],
                    'max': 10
                }
                
                url = f"{self.base_url}/v2/shopping/flight-offers"
                response = requests.get(url, headers=headers, params=params)
                
                if response.status_code == 200:
                    flight_data = response.json()
                    deals.extend(self.format_flight_deals(flight_data, brief))
        
        return deals
    
    def format_flight_deals(self, flight_data, brief):
        """Format Amadeus response into standardized deal format"""
        deals = []
        for offer in flight_data.get('data', []):
            deal = {
                'type': 'flight',
                'destination': offer['itineraries'][0]['segments'][-1]['arrival']['iataCode'],
                'departure_date': offer['itineraries'][0]['segments'][0]['departure']['at'],
                'return_date': offer['itineraries'][1]['segments'][-1]['arrival']['at'] if len(offer['itineraries']) > 1 else None,
                'total_price': float(offer['price']['total']),
                'currency': offer['price']['currency'],
                'airline': offer['itineraries'][0]['segments'][0]['carrierCode'],
                'booking_url': f"https://amadeus.com/book/{offer['id']}",
                'brief_id': brief['Brief_ID']
            }
            deals.append(deal)
        return deals
```

### **openai_analyzer.py - AI Deal Analysis**
```python
import openai
import config

class OpenAIAnalyzer:
    def __init__(self):
        openai.api_key = config.OPENAI_API_KEY
    
    def analyze_deal(self, deal, brief):
        """Analyze deal suitability using OpenAI"""
        
        family_context = self.build_family_context(brief)
        deal_context = self.build_deal_context(deal)
        
        prompt = f"""
Analyze this travel deal for the Lefley family:

{family_context}

Travel Brief:
- Destination preferences: {brief['Destinations']}
- Budget limit: Â£{brief['Budget_Max']}
- Travel dates: {brief['Travel_Dates']}
- Trip duration: {brief['Trip_Duration']}
- Special requirements: {brief.get('AI_Instructions', 'None')}

Deal Details:
{deal_context}

Rate this deal 1-10 considering:
1. Value for money (vs typical prices)
2. Family suitability (ages 13, 10)
3. Alignment with preferences
4. Practical considerations (flights, transfers)

Respond in JSON format:
{{
    "score": X,
    "recommendation": "BOOK_NOW/WATCH/IGNORE", 
    "value_assessment": "brief explanation",
    "family_suitability": "brief explanation",
    "key_pros": ["pro1", "pro2"],
    "key_cons": ["con1", "con2"],
    "action_summary": "one sentence recommendation"
}}
"""

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=500
        )
        
        return self.parse_ai_response(response.choices[0].message.content)
    
    def build_family_context(self, brief):
        """Build family context for AI"""
        travelers = self.parse_travelers(brief['Travelers'])
        return f"""
Family: Lefley family from London (Wimbledon Park)
- 2 adults (Jonathan 53, Belinda 46)
- Children: Martha (13), Margot (10)
- Optional: Tabitha (17) - rarely joins
- Current trip: {travelers['total']} people
- Home airports: Heathrow (preferred), Gatwick, Stansted
- Previous enjoyed: Dubai, Rome city break
- School constraints: Ricards Lodge High School holidays
"""
```

### **Environment Variables Required**
```
AMADEUS_CLIENT_ID=your_amadeus_client_id
AMADEUS_CLIENT_SECRET=your_amadeus_client_secret
OPENAI_API_KEY=your_openai_api_key
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
GOOGLE_SHEET_ID=your_google_sheet_id
TELEGRAM_CHAT_ID=your_telegram_chat_id
```

### **Key Features to Implement**

1. **Error Handling** - Graceful API failures, continue processing other briefs
2. **Rate Limiting** - Respect API quotas, add delays between calls
3. **Logging** - Comprehensive logging of all activities and errors
4. **Deal Deduplication** - Don't alert same deal multiple times
5. **Price Tracking** - Track price changes over time
6. **Smart Scheduling** - Only run during reasonable hours
7. **Family Context** - Always consider children's ages and school holidays

### **Testing Strategy**
1. Start with one active brief
2. Test API connections individually
3. Test AI analysis with sample data
4. Test Telegram notifications
5. Run full cycle with logging
6. Monitor for 48 hours before full activation

The agent should build this as a robust, production-ready system that can run continuously and reliably find travel deals for the Lefley family.